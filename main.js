/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/ui */ \"./src/modules/ui.js\");\n\n\ndocument.addEventListener('DOMContentLoaded', _modules_ui__WEBPACK_IMPORTED_MODULE_0__[\"default\"].loadHomepage);\n\n//# sourceURL=webpack://todo-list/./src/index.js?");

/***/ }),

/***/ "./src/modules/projects.js":
/*!*********************************!*\
  !*** ./src/modules/projects.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Project)\n/* harmony export */ });\nclass Project {\n    constructor(name) {\n        this.name = name;\n        this.tasks = [];\n    }\n\n    setName(name) {\n        this.name = name;\n    }\n\n    getName() {\n        return this.name;\n    }\n\n    setTasks(tasks) {\n        this.tasks = tasks;\n    }\n\n    getTasks() {\n        return this.tasks;\n    }\n\n    getTask(taskName) {\n        return this.tasks.find(task => task.getName() === taskName);\n    }\n\n    contains(taskName) {\n        return this.tasks.some(task => task.getName() === taskName);\n    }\n    \n    totalTasks() {\n        return this.tasks.length;\n    }\n\n    addTask(newTask) {\n        if (this.tasks.find(task => task.getName() === newTask.name)) return;\n        this.tasks.push(newTask)\n    }\n\n    deleteTask(taskName) {\n        this.tasks = this.tasks.filter(task => task.name !== taskName);\n    }\n\n    getTodayTasks() {\n        const taskDate = new Intl.DateTimeFormat(\"fr-CA\", {\n            year: \"numeric\", \n            month: \"2-digit\", \n            day: \"2-digit\"\n        }).format(Date.now());\n        return this.tasks.filter(task => task.dueDate === taskDate);\n    }\n\n    getUpcomingTasks() {\n        const taskDate = new Intl.DateTimeFormat(\"fr-CA\", {\n            year: \"numeric\", \n            month: \"2-digit\", \n            day: \"2-digit\"\n        }).format(Date.now());\n        return this.tasks.filter(task => task.dueDate !== taskDate);\n    }\n}\n\n//# sourceURL=webpack://todo-list/./src/modules/projects.js?");

/***/ }),

/***/ "./src/modules/storage.js":
/*!********************************!*\
  !*** ./src/modules/storage.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Storage)\n/* harmony export */ });\n/* harmony import */ var _projects__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./projects */ \"./src/modules/projects.js\");\n/* harmony import */ var _task__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./task */ \"./src/modules/task.js\");\n/* harmony import */ var _todo_list__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./todo-list */ \"./src/modules/todo-list.js\");\n\n\n\n\nclass Storage {\n    static saveTodoList(data) {\n        localStorage.setItem('todoList', JSON.stringify(data))\n    }\n\n    static getTodoList() {\n        const todoList = Object.assign(new _todo_list__WEBPACK_IMPORTED_MODULE_2__[\"default\"](), JSON.parse(localStorage.getItem('todoList')));\n\n        todoList.setProjects(todoList.getProjects().map(project => Object.assign(new _projects__WEBPACK_IMPORTED_MODULE_0__[\"default\"](), project)));\n\n        todoList.getProjects().forEach(project => project.setTasks(project.getTasks().map(task => Object.assign(new _task__WEBPACK_IMPORTED_MODULE_1__[\"default\"](), task))));\n\n        return todoList;\n    }\n\n    static addProject(project) {\n        const todoList = Storage.getTodoList();\n        todoList.addProject(project);\n        Storage.saveTodoList(todoList);\n    }\n\n    static deleteProject(projectName) {\n        const todoList = Storage.getTodoList();\n        todoList.deleteProject(projectName);\n        Storage.saveTodoList(todoList);\n    }\n\n    static addTask(projectName, task) {\n        const todoList = Storage.getTodoList();\n        todoList.getProject(projectName).addTask(task);\n        Storage.saveTodoList(todoList);\n    }\n\n    static deleteTask(projectName, taskName) {\n        const todoList = Storage.getTodoList();\n        todoList.getProject(projectName).deleteTask(taskName);\n        Storage.saveTodoList(todoList);\n    }\n\n    static updateTask(projectName, taskName, newValues) {\n        const todoList = Storage.getTodoList();\n        todoList.getProject(projectName).getTask(taskName).getAllValues(newValues);\n        Storage.saveTodoList(todoList);\n    }\n\n    static updateTaskStatus(projectName, taskName, isComplete) {\n        const todoList = Storage.getTodoList();\n        todoList.getProject(projectName).getTask(taskName).setComplete(isComplete);\n        Storage.saveTodoList(todoList);\n    }\n\n    static updateTodayProject() {\n        const todoList = Storage.getTodoList();\n        todoList.updateTodayProject();\n        Storage.saveTodoList(todoList);\n    }\n\n    static updateUpcomingProject() {\n        const todoList = Storage.getTodoList();\n        todoList.updateUpcomingProject();\n        Storage.saveTodoList(todoList);\n    }\n}\n\n\n//# sourceURL=webpack://todo-list/./src/modules/storage.js?");

/***/ }),

/***/ "./src/modules/task.js":
/*!*****************************!*\
  !*** ./src/modules/task.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Task)\n/* harmony export */ });\nclass Task {\n    constructor(name, notes, dueDate, priority) {\n      this.name = name;\n      this.notes = notes;\n      this.dueDate = dueDate;\n      this.priority = priority;\n      this.complete = false;\n    }\n  \n    setName(name) {\n        this.name = name;\n    }\n    \n    getName() {\n        return this.name;\n    }\n\n    setNotes(notes) {\n        this.notes = notes;\n    }\n    \n    getNotes() {\n        return this.notes;\n    }\n  \n    setDate(dueDate) {\n        this.dueDate = dueDate;\n    }\n  \n    getDate() {\n        return this.dueDate;\n    }\n\n    setPriority(priority) {\n        this.priority = priority;\n    }\n\n    getPriority() {\n        return this.priority;\n    }\n\n    setComplete(complete) {\n        this.complete = complete;\n    }\n\n    getComplete() {\n        return this.complete;\n    }\n\n    getAllValues(newValues) {\n        this.name = newValues.name;\n        this.notes = newValues.notes;\n        this.dueDate = newValues.dueDate;\n        this.priority = newValues.priority;\n    }\n  \n    getDateFormatted() {\n        const day = this.dueDate.split('/')[0]\n        const month = this.dueDate.split('/')[1]\n        const year = this.dueDate.split('/')[2]\n        return `${month}/${day}/${year}`\n    }\n}\n\n\n\n//# sourceURL=webpack://todo-list/./src/modules/task.js?");

/***/ }),

/***/ "./src/modules/todo-list.js":
/*!**********************************!*\
  !*** ./src/modules/todo-list.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TodoList)\n/* harmony export */ });\n/* harmony import */ var _projects__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./projects */ \"./src/modules/projects.js\");\n/* harmony import */ var _task__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./task */ \"./src/modules/task.js\");\n\n\n\nclass TodoList {\n    constructor() {\n        this.projects = [];\n        this.projects.push(new _projects__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"Inbox\"));\n        this.projects.push(new _projects__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"Today\"));\n        this.projects.push(new _projects__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"Upcoming\"));\n    }\n\n    setProjects(projects) {\n        this.projects = projects;\n    }\n\n    getProjects() {\n        return this.projects;\n    }\n\n    getProject(projectName) {\n        return this.projects.find(project => project.getName() === projectName);\n    }\n\n    contains(projectName) {\n        return this.projects.some(project => project.getName() === projectName);\n    }\n\n    addProject(newProject) {\n        if (this.projects.find(project => project.name === newProject.name)) return;\n        this.projects.push(newProject);\n    }\n\n    deleteProject(projectName) {\n        const projectToDelete = this.projects.find(project => project.getName() === projectName);\n        this.projects.splice(this.projects.indexOf(projectToDelete), 1);\n    }\n\n    updateTodayProject() {\n        this.getProject(\"Today\").tasks = [];\n\n        this.projects.forEach(project => {\n            if (project.getName() === \"Today\" || project.getName() === \"Upcoming\") return;\n\n            const todayTasks = project.getTodayTasks();\n            todayTasks.forEach(task => {\n                const taskName = `${task.getName()} (${project.getName()})`\n                this.getProject(\"Today\").addTask(new _task__WEBPACK_IMPORTED_MODULE_1__[\"default\"](taskName, task.getNotes(), task.getDate(), task.getPriority()));\n            });\n        })\n    }\n\n    updateUpcomingProject() {\n        this.getProject(\"Upcoming\").tasks = [];\n\n        this.projects.forEach(project => {\n            if (project.getName() === \"Today\" || project.getName() === \"Upcoming\") return;\n\n            const upcomingTasks = project.getUpcomingTasks();\n            upcomingTasks.forEach(task => {\n                const taskName = `${task.getName()} (${project.getName()})`\n                this.getProject(\"Upcoming\").addTask(new _task__WEBPACK_IMPORTED_MODULE_1__[\"default\"](taskName, task.getNotes(), task.getDate(), task.getPriority()));\n            });\n        })\n\n        const sortTasksByDate = (taskA, taskB) => {\n            return new Date(taskA.dueDate).valueOf() - new Date(taskB.dueDate).valueOf();\n        }\n\n        this.getProject(\"Upcoming\").setTasks(this.getProject(\"Upcoming\").getTasks().sort(sortTasksByDate));\n    }\n}\n\n//# sourceURL=webpack://todo-list/./src/modules/todo-list.js?");

/***/ }),

/***/ "./src/modules/ui.js":
/*!***************************!*\
  !*** ./src/modules/ui.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ UI)\n/* harmony export */ });\n/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./storage */ \"./src/modules/storage.js\");\n/* harmony import */ var _projects__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./projects */ \"./src/modules/projects.js\");\n/* harmony import */ var _task__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./task */ \"./src/modules/task.js\");\n\n\n\n\nclass UI {\n    // LOADING CONTENT\n\n    static loadHomepage() {\n        UI.openProject(\"Inbox\", document.querySelector(\".folder-inbox\"));\n        const modal = document.querySelector(\"#modal\");\n        const closeModalBtn = document.querySelector(\".fa-xmark\");\n        closeModalBtn.addEventListener(\"click\", () => {\n            modal.style.display = \"none\";\n        });\n        UI.loadProjects();\n        UI.initProjectButtons();\n        UI.addTaskForm();\n    }\n\n    static loadProjects() {\n        const inboxCount = document.querySelector(\"[data-inbox-count]\");\n        const todayCount = document.querySelector(\"[data-today-count]\");\n        const upcomingCount = document.querySelector(\"[data-upcoming-count]\");\n\n        inboxCount.textContent = _storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getTodoList().getProject(\"Inbox\").totalTasks();\n        todayCount.textContent = _storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getTodoList().getProject(\"Today\").totalTasks();\n        upcomingCount.textContent = _storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getTodoList().getProject(\"Upcoming\").totalTasks();\n\n        _storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getTodoList().getProjects().forEach(project => {\n            if (project.name !== \"Inbox\" && project.name !== \"Today\" && project.name !== \"Upcoming\") {\n                UI.renderProject(project.name);\n            }\n        })\n\n        const newProjectForm = document.querySelector(\"[data-new-project-form]\");\n        newProjectForm.addEventListener(\"submit\", e => {\n            e.preventDefault();\n            const newProjectInput = document.querySelector(\"[data-new-project-input]\");\n            const projectName = newProjectInput.value;\n\n            if (projectName === null || projectName === \"\") {\n                alert(\"Please, set a name to your Project.\");\n                return;\n            }\n\n            if (_storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getTodoList().contains(projectName)) {\n                newProjectInput.value = \"\";\n                alert(\"Project already exists!\");\n                return;\n            }\n\n            newProjectForm.reset();\n            _storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addProject(new _projects__WEBPACK_IMPORTED_MODULE_1__[\"default\"](projectName));\n            UI.renderProject(projectName);\n        });\n    }\n\n    static loadTasks(projectName) {\n        const inboxCount = document.querySelector(\"[data-inbox-count]\");\n        const todayCount = document.querySelector(\"[data-today-count]\");\n        const upcomingCount = document.querySelector(\"[data-upcoming-count]\");\n\n        inboxCount.textContent = _storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getTodoList().getProject(\"Inbox\").totalTasks();\n        todayCount.textContent = _storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getTodoList().getProject(\"Today\").totalTasks();\n        upcomingCount.textContent = _storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getTodoList().getProject(\"Upcoming\").totalTasks();\n\n        _storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getTodoList().getProject(projectName).getTasks().forEach(task => UI.renderTask(task.name, task.notes, notes.dueDate, task.priority, task.complete));\n    }\n\n    // RENDERING CONTENT\n\n    static renderTodoList(projectName) {\n        const todoListContainer = document.querySelector(\"[data-todo-display-container]\");\n        todoListContainer.innerHTML = `\n            <div class=\"todo-header\">\n                <h2 class=\"project-name\" data-project-name>${projectName}</h2>\n            </div>\n\n            <div class=\"todo-content\">\n                <div class=\"tasks\" data-tasks></div>\n            </div>\n            <div class=\"clear\">\n                <button class=\"btn delete\" data-clear-completed-tasks-button>Clear Completed Tasks</button>\n                <button class=\"btn delete\" data-delete-project-button>Delete Project</button>\n            </div>`\n\n        if (projectName !== \"Today\" && projectName !== \"Upcoming\") {\n            const todoContent = document.querySelector(\".todo-content\");\n            todoContent.innerHTML = `\n                <div class=\"tasks\" data-tasks></div>\n\n                <div class=\"new-task-btn\">\n                    <i class=\"fa-solid fa-plus\"></i>\n                    <button class=\"btn add-task\">\n                        New Task\n                    </button>\n                </div>`\n        }\n\n        UI.initAddTaskButton();\n        UI.initClearAndDeleteButtons();\n        UI.loadTasks(projectName);\n    }\n\n    static renderProject(name) {\n        const userProjects = document.querySelector(\"[data-projects]\");\n        const projectElement = document.createElement(\"li\");\n        projectElement.className = \"project-item\";\n        projectElement.textContent = name;\n\n        userProjects.appendChild(projectElement);\n\n        UI.initProjectButtons();\n    }\n\n    static  renderTask(name, notes, dueDate, priority, isComplete) {\n        const tasksList = document.querySelector(\"[data-tasks]\");\n\n        const taskTemplate = document.querySelector(\"#task-template\");\n        const taskElement = document.importNode(taskTemplate.content, true);\n        const checkbox = taskElement.querySelector(\"input\");\n        checkbox.id = name;\n        checkbox.checked = isComplete;\n        const label = taskElement.querySelector(\"label\");\n        label.htmlFor = name;\n        label.append(name);\n        const editTask = taskElement.querySelector(\".edit-icon\");\n        editTask.addEventListener(\"click\", () => {\n            const newTaskForm = document.querySelector(\"[data-new-task-form]\");\n            const modal = document.querySelector(\"#modal\");\n            const formTitle = document.querySelector(\".form-title\");\n            const formTaskName = document.querySelector(\"[data-new-task-name]\");\n            const formTaskNotes = document.querySelector(\"[data-new-task-notes]\");\n            const formTaskDueDate = document.querySelector(\"[data-new-task-due-date]\");\n            const formTaskPriority = document.querySelector(\"[data-new-task-priority]\");\n\n            modal.style.display = \"block\";\n            formTitle.textContent = \"Edit Task\";\n            newTaskForm.id = name;\n            formTaskName.value = name;\n            formTaskNotes.value = notes;\n            formTaskDueDate.value = dueDate;\n            formTaskPriority.checked = priority;\n        });\n\n        if (priority === true) {\n            const icons = taskElement.querySelector(\".icons\");\n            const priorityIcon = document.createElement(\"i\");\n            priorityIcon.className = \"fa-solid fa-flag priority-icon\";\n            icons.appendChild(priorityIcon);\n        }\n\n        tasksList.appendChild(taskElement);\n\n        const taskItems = document.querySelectorAll(\".task-item\");\n        taskItems.forEach(task => task.addEventListener(\"click\", UI.handleTaskElement));\n    }\n\n    // CLEAR ELEMENTS\n\n    static clear() {\n        UI.clearTodoDisplay()\n        UI.clearProjects()\n        UI.clearTasks()\n    }\n\n    static clearTodoDisplay() {\n        const projectName = document.querySelector(\"[data-project-name]\");\n        projectName.textContent = \"\";\n        const tasksList = document.querySelector(\"[data-tasks]\");\n        tasksList.textContent = \"\";\n    }\n\n    static clearProjects() {\n        const projectsList = document.querySelector(\"[data-projects]\");\n        projectsList.textContent = \"\";\n    }\n\n    static clearTasks() {\n        const tasksList = document.querySelector(\"[data-tasks]\");\n        tasksList.textContent = \"\";\n    }\n\n    // PROJECT EVENT LISTENERS\n\n    static initProjectButtons() {\n        const inbox = document.querySelector(\".folder-inbox\");\n        const today = document.querySelector(\".folder-today\");\n        const upcoming = document.querySelector(\".folder-upcoming\");\n        const userProjects = document.querySelectorAll(\".project-item\");\n\n        inbox.addEventListener(\"click\", UI.renderInboxTasks);\n        today.addEventListener(\"click\", UI.renderTodayTasks);\n        upcoming.addEventListener(\"click\", UI.renderUpcomingTasks);\n        userProjects.forEach(project => project.addEventListener(\"click\", UI.handleProjectButton));\n    }\n\n    static renderInboxTasks() {\n        UI.openProject(\"Inbox\", this);\n    }\n\n    static renderTodayTasks() {\n        _storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].updateTodayProject();\n        UI.openProject(\"Today\", this);\n    }\n\n    static renderUpcomingTasks() {\n        _storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].updateUpcomingProject();\n        UI.openProject(\"Upcoming\", this);\n    }\n\n    static handleProjectButton(e) {\n        const projectName = this.textContent;\n\n        if (e.target.classList.contains(\"fas fa-times\")) {\n            UI.deleteProject(projectName, this);\n            return;\n        }\n\n        UI.openProject(projectName, this);\n    }\n\n    static openProject(projectName, projectFolder) {\n        const defaultProjects = document.querySelectorAll(\"[data-folder]\");\n        const userProjects = document.querySelectorAll(\".project-item\");\n        const allProjects = [...defaultProjects, ...userProjects];\n\n        allProjects.forEach(project => project.classList.remove(\"active\"));\n        projectFolder.classList.add(\"active\");\n\n        UI.renderTodoList(projectName);\n    }\n\n    static deleteProject(projectName, project) {\n        if (project.classList.contains(\"active\")) UI.clearTodoDisplay();\n        _storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].deleteProject(projectName);\n        UI.clearProjects();\n        UI.loadProjects();\n    }\n\n    // TASK EVENT LISTENERS\n\n    static initAddTaskButton() {\n        const projectName = document.querySelector(\"[data-project-name]\").textContent;\n        if (projectName !== \"Today\" && projectName !== \"Upcoming\") {\n            const newTaskBtn = document.querySelector(\".new-task-btn\");\n            newTaskBtn.addEventListener(\"click\", () => {\n                const modal = document.querySelector(\"#modal\");\n                modal.style.display = \"block\";\n            });\n        }\n    }\n\n    static handleTaskElement(e) {\n        if (e.target.tagName.toLowerCase() === \"input\") {\n            UI.setTaskComplete(this);\n            return;\n        }\n        if (e.target.classList.contains(\"delete-icon\")) {\n            UI.deleteTask(this);\n            return;\n        }\n    }\n\n    static setTaskComplete(taskItem) {\n        const projectName = document.querySelector(\"[data-project-name]\").textContent;\n        const completedTask = _storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getTodoList().getProject(projectName).getTask(taskItem.children[0].id);\n        completedTask.complete = taskItem.children[0].checked;\n        _storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].updateTaskStatus(projectName, taskItem.children[0].id, completedTask.complete);\n    }\n\n    static deleteTask(taskItem) {\n        const projectName = document.querySelector(\"[data-project-name]\").textContent;\n        const taskName = taskItem.children[1].innerText;\n\n        if (projectName === \"Today\" || projectName === \"Upcoming\") {\n            const mainProjectName = taskName.split('(')[1].split(')')[0];\n            _storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].deleteTask(mainProjectName, taskName);\n        }\n        _storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].deleteTask(projectName, taskName);\n        UI.clearTasks();\n        UI.loadTasks(projectName);\n    }\n\n    static initClearAndDeleteButtons() {\n        const projectName = document.querySelector(\"[data-project-name]\").textContent;\n        const clearCompletedTasksBtn = document.querySelector(\"[data-clear-completed-tasks-button]\");\n        const deleteProjectBtn = document.querySelector(\"[data-delete-project-button]\");\n\n        clearCompletedTasksBtn.addEventListener(\"click\", () => {\n            const completedTasks = _storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getTodoList().getProject(projectName).getTasks().filter(task => task.complete);\n\n            completedTasks.forEach(task => _storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].deleteTask(projectName, task.name));\n            UI.clearTasks();\n            UI.loadTasks(projectName);\n        });\n\n        deleteProjectBtn.addEventListener(\"click\", () => {\n            if (projectName !== \"Inbox\" && projectName !== \"Today\" && projectName !== \"Upcoming\") {\n                _storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].deleteProject(projectName);\n                UI.clear();\n                UI.loadProjects();\n            }\n        });\n    }\n\n    // TASKS FORM\n\n    static addTaskForm() {\n        const newTaskForm = document.querySelector(\"[data-new-task-form]\");\n        const formTitle = document.querySelector(\".form-title\");\n        const projectName = document.querySelector(\"[data-project-name]\").textContent;\n\n        newTaskForm.addEventListener(\"submit\", e => {\n            e.preventDefault();\n\n            const data = new FormData(e.target);\n            let newTask = {};\n\n            for (let [name, value] of data) {\n                if (name === \"priority\") {\n                    newTask[\"priority\"] = true;\n                } else {\n                    newTask[name] = value || \"\";\n                }\n            }\n\n            if (!newTask[\"priority\"]) {\n                newTask[\"priority\"] = false;\n            }\n\n            if (newTask[\"task-title\"] === \"\") {\n                alert(\"Task Name Can't be Empty!\");\n                return;\n            }\n            if (_storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getTodoList().getProject(projectName).contains(newTask[\"task-title\"])) {\n                alert('Task Already Exists!')\n                return;\n            }\n\n            if (formTitle.textContent === \"Edit Task\") {\n                const projectName = document.querySelector(\"[data-project-name]\").textContent;\n                let editTask = _storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getTodoList().getProject(projectName).getTask(e.target.id);\n                editTask.name = newTask[\"task-title\"];\n                editTask.notes = newTask[\"notes\"];\n                editTask.dueDate = newTask[\"due-date\"];\n                editTask.priority = newTask[\"priority\"];\n                _storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].updateTask(projectName, e.target.id, editTask);\n                UI.clearTasks();\n                UI.loadTasks(projectName);\n            } else {\n                const projectName = document.querySelector(\"[data-project-name]\").textContent;\n                _storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addTask(projectName, new _task__WEBPACK_IMPORTED_MODULE_2__[\"default\"](newTask[\"task-title\"], newTask[\"notes\"], newTask[\"due-date\"], newTask[\"priority\"]));\n                UI.clearTasks();\n                UI.loadTasks(projectName);\n            }\n\n            newTaskForm.reset();\n            modal.style.display = \"none\";\n        });\n    }\n}\n\n//# sourceURL=webpack://todo-list/./src/modules/ui.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;